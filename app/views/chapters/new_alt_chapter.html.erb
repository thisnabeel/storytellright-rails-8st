

<%= form_for(@alt_chapter) do |f| %>
  <% if @chapter.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@chapter.errors.count, "error") %> prohibited this chapter from being saved:</h2>

      <ul>
      <% @chapter.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field form-group ">
    <%= f.label :title %><br>
    <%= f.text_field :title, class: "form-control" %>
  </div>
  <div class="field form-group ">
    <%= f.label :description %><br>
    <%= f.text_area :description, class: "form-control" %>
  </div>


  
  <div class="form-group">
  <label for="sel1">Select Body Type:</label>
  <select class="form-control" type="text" name="chapter[body_type]" id="chapter_body_type">
    <option value="text">Text</option>
    <option value="presentation">Presentation</option>
  </select>
  </div>

  <div class="field form-group ">
    <%= f.label :post %><br>
    <%= f.text_area :post, :class => 'post' %>
  </div>
  <% unless @alt_chapter.chapter_id.present? %>
    <%= f.hidden_field :chapter_id, :value => params[:chapter_id] %>
  <% end %>

  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

<hr>
  <%= link_to 'Destroy Alt Chapter', @alt_chapter, method: :delete, data: { confirm: 'Are you sure?' } %>


<script>
    $('.post').froalaEditor({
      // Add the custom buttons in the toolbarButtons list, after the separator.
      toolbarButtons: ['fullscreen', 'bold', 'italic', 'underline', 'fontFamily', 'fontSize', 'color', 'paragraphStyle', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'quote', 'insertHR', 'insertLink', 'insertImage', 'insertVideo', 'insertFile', 'insertTable', 'undo', 'redo', 'clearFormatting', 'ayah', 'rightToLeft', 'leftToRight', 'html'],
      toolbarButtonsSM: ['ayah'],
      key: "NcoF-10qusafttE2F-10vw==",
      imageUploadToS3: {
        bucket: '<%= @hash[:bucket] %>',
        region: 's3', // Change the region if it is different
        keyStart: '<%= @hash[:key_start] %>',
        callback: function (url, key) {
          // The URL and Key returned from Amazon.
          console.log (url);
          console.log (key);
        },
        params: {
          acl: '<%= @hash[:acl] %>', // ACL according to Amazon Documentation.
          AWSAccessKeyId: '<%= @hash[:access_key] %>', // Access Key from Amazon.
          policy: '<%= @hash[:policy] %>', // Policy string computed in the backend.
          signature: '<%= @hash[:signature] %>', // Signature computed in the backend.
        }
      }
    });

  // var node = $('.post').getSelection().anchorNode;
  // var selected_place = (node.nodeType == 3 ? node.parentNode : node);

  // //inserts to the selected place as I wanted
  // selected_place.parentNode.insertBefore(document.getElementById("my_custom_element"), selected_place.nextSibling);
</script>