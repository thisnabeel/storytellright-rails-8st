<style>
  .tab-chords {
    font-size: 74px;
    padding: 70px 30px;
    font-weight: bolder;
    background: #ffffe6;
  }

  .chords-box-list {
    padding: 20px 0;
  }

  .chords-box-list li {
    display: inline-block;
    font-size: 34px;
    background: #fff;
    margin-right: 10px;
    padding: 10px;
  }

  .chords-box {
    position: relative;
  }

  .chords-list-touch {
    position: absolute;
    left: -40px;
    top: -3px;
    font-size: 35px;
    color: #c4c2c0;
  }

  .chords-list-touch.active {
    color: blue;
  }

  .playing {
    background: #58e7ff !important;
  }

  .current-chord {
    padding: 20px
  }

</style>

<p class="folder-head">Chords:</p>
  <div class="chords-box">
    <select class="chords-box-key">
      <% keys = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"] %>
      <% keys.each do |k| %>
        <option value="<%= k %>">
          <%= k %>
        </option>
      <% end %>
    </select>
    <!--  -->

    <select class="chords-box-mode">
      <% keys = ["ionian", "aeolian", "dorian", "phrygian", "lydian", "mixolydian", "locrian"] %>
      <% keys.each do |k| %>
        <option value="<%= k %>">
          <%= k %>
        </option>
      <% end %>
    </select>

    <span class="current-chord"></span>

    <ul class="chords-box-list clean-list">
    </ul>

    

    <i class="fa fa-bullseye chords-list-touch"></i>
  </div>
  <input class="form-control tab-chords save-this" data-code="chords" placeholder="Enter Chords..." />

<script>
  romans = ["I", "II", "III", "IV", "V", "VI", "VII"]


  scales = {
      "ionian": ["W", "W", "H", "W", "W", "W", "H"],
      "dorian": ["W", "H", "W", "W", "W", "H", "W"],
      "phrygian": ["H", "W", "W", "W", "H", "W", "W"],
      "lydian": ["W", "W", "W", "H", "W", "W", "H"],
      "mixolydian": ["W", "W", "H", "W", "W", "H", "W"],
      "aeolian": ["W", "H", "W", "W", "H", "W", "W"],
      "locrian": ["H", "W", "W", "H", "W", "W", "W"]
  }

  suffixes = {
    "major": [0,4,7],
    "minor": [0,3,7],
    "5": [0,7],
    "7": [0,4,7,10],
    "maj7": [0,4,7,12],
    "m7": [0,3,7,10],
    "sus2": [0,2,7],
    "sus4": [0,5,7],
    "add2": [0,2,4,7],
    "add9": [0,4,7,14],
    "6": [],
    "9": [],
    "m9": [],
    "maj9": [],
    "11": [],
    "13": [],
    "m13": [],
    "maj13": [],
    "dim": [0,3,6],
    "o": [0,3,6],
    "+": [0,4,8],
    "7#9": []
  }



  // console.log(chord_finder)

  function buildChordBox(){
    val = $(".tab-chords").val()

    if (val.length > 0) {
      chords_list = val.split("-")

      $(".chords-box-list").empty()

      $.each(chords_list, function(index, item){
        
        ct = findChordType(item)
        $(".chords-box-list").append(
          `<li data-degree="`+ct["degree"]+`" data-chord-type="`+ct["chord_type"]+`">
            `+item+`
          </li>`
        )
      })
    }
  }

  $("body").on("change", ".chords-box-mode, .chords-box-key", function(){
    $(".active-tab").attr("data-scale",  $(".chords-box-mode").val())
    $(".active-tab").attr("data-key", $(".chords-box-key").val())
    saveSong()
  })


  $("body").on("click", ".chords-box-list li", function(){
    playChordsList($(this))
  })

  function playChordsList(el){
     // Get Note Degree
    degree = el.attr("data-degree")
    // Get Note Chord Type
    ch = el.attr("data-chord-type");

    list_key = $(".chords-box-key").val()
    list_mode = $(".chords-box-mode").val()
    
    // Get Note Octavian
    i = octavian.indexOf(
      list_key
    );
    octavian.push.apply(octavian, octavian.splice(0, i));

    out = []
    o = 0 

    $.each(scales[list_mode], function(index, item){
      r = romans[index]

      out.push(o)

      if (item == "W"){
        o += 2
      } else {
        o += 1
      }
    })

    keyed = []
    $.each(out, function(index, item){
      n = octavian[item]
      keyed.push(n)
    })



    console.log("notes", keyed)

    note = keyed[degree - 1]

    // console.log("degree", note)
    console.log("chord", note +" "+ ch)
    playMadeChords(note, ch)

    $(".current-chord").html(note + " " + ch)

    el.addClass("playing")
    setTimeout(function(){ 
      el.removeClass("playing")
    }, 250);
  }



  function playMadeChords(note, ch) {
    i = octavian.indexOf(note);
    octavian.push.apply(octavian, octavian.splice(0, i));

    console.log(octavian)

    octos = []
    octave = 4

    $.each(suffixes[ch], function(index, item){

      
      // this_placement = octavian.indexOf(octavian[item])
      // c_placement = octavian.indexOf("C");
      // net = octavian.indexOf(octavian[item]) - octavian.indexOf("C")

      // console.log(octavian[item] + " is placed", this_placement);
      // console.log("C placed", c_placement);
      // console.log("difference", net)

      // // 
      //   if (c_placement == 0) {

      //   } else {
      //     if (net > -1){
      //       console.log("next_octave")
      //       octave = 5
            
      //     } else {
      //       console.log("same_octave")
      //     }

      //   }
      // // 
      // console.log(octavian[item], octave)

      piano.play(octavian[item], octave, 3);
      
    })


  }


  // 
  $("body").on("click", ".chords-list-touch", function(){
    $(this).toggleClass("active")
  })


// 

  $(document).on('keypress',function(e) {
    // console.log(e.key)

    if ($(".chords-list-touch").hasClass("active")) {
      
      console.log(e.key)
      el = $(".chords-box-list li").eq(e.key - 1)

      playChordsList(el)

    } else {
      

    }

  });


// 
function findChordType(item){
  
  split = ""
  split = chordSplitter(item)
  clean = item.replace(split, "")
  upcase = clean.toUpperCase()
  degree = romans.indexOf(upcase) + 1;
  

  if (split) {
    return {
      degree: degree,
      chord_type: split
    }
  }
  // FIRST CHECK IF MAJOR OR MINOR 
  if (clean == clean.toUpperCase()) {
   chord_type = "major"
   return {
      degree: degree,
      chord_type: chord_type
    }
  }
  if (clean == clean.toLowerCase()){
   chord_type = "minor"
   return {
      degree: degree,
      chord_type: chord_type
    }
  }

}



function chordSplitter(chord){

  suffix_output = ""
  $.each(suffixes, function(index, item){
    if (index == "+") {
      suffix_output += "\\+?|"
    } else {
      suffix_output += index + "?|"
    }
  })


  types = "(?:"+suffix_output+")"
  regex = new RegExp(types+"\\b", "g");

  var matched_chords = chord.match(regex);
  var newArray = matched_chords.filter(function(v){return v!==''});
  // console.log(matched_chords);
  // console.log("Split", newArray[0])

  return newArray[0]
}
</script>