<style>
  .tab-chords {
    font-size: 44px;
    padding: 0 30px;
    font-weight: bolder;
    background: #ffffe6;
  }

  .chords-box-list {
    padding: 20px 0;
  }

  .chords-box-list li {
    display: inline-block;
    font-size: 34px;
    background: #fff;
    margin-right: 10px;
    padding: 10px;
  }

  .chords-box {
    position: relative;
  }

  .chords-list-touch {
    position: absolute;
    left: -40px;
    top: -3px;
    font-size: 35px;
    color: #c4c2c0;
  }

  .chords-list-touch.active {
    color: blue;
  }

  .playing {
    background: #58e7ff !important;
  }

  .current-chord {
    padding: 20px
  }

</style>

<div class="jumbotron">
  <h1>Music Lab:</h1>
  <p>
    <b>Instructions:</b>
    <ol>
      <li>Type & Seperate Roman Numeral Scale Degrees (1..7) by "-"</li>
      <b style="display: block;">Example: "I-IV-vi-V"</b>
      </li>
      <li>Click <b>The Bullseye</b> or <b>[`]</b> to toggle keyboard triggers, use digits to play!</li>
      <li>Uppercase = Major</li>
      <li>Lowercase = Minor</li>
      <li class="suffixes-available">Try Suffixes!</li>
      <li><b>Bonus:</b> Click the Book button on bottom right for pre-made inspirations.</li>
    </ol>
  </p>
</div>

<div style="overflow: scroll; width: 100%; padding: 30px 0;">
<%= render "songs/instruments/embed_piano" %>
</div>


<p>Chords:</p>
  <div class="chords-box">
    <select class="chords-box-key">
      <% keys = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"] %>
      <% keys.each do |k| %>
        <option value="<%= k %>">
          <%= k %>
        </option>
      <% end %>
    </select>
    <!--  -->

    <select class="chords-box-mode">
      <% keys = ["ionian", "aeolian", "dorian", "phrygian", "lydian", "mixolydian", "locrian"] %>
      <% keys.each do |k| %>
        <option value="<%= k %>">
          <%= k %>
        </option>
      <% end %>
    </select>

    <span class="current-chord"></span>

    <ul class="chords-box-list clean-list">
    </ul>

    

    <i class="fa fa-bullseye chords-list-touch"></i>
  </div>
  <input class="form-control tab-chords save-this" data-code="chords" placeholder="Enter Chords..." />

  <br>
  
  <p>Notepad:</p>
  <textarea name="" id="" cols="30" rows="10" class="form-control"></textarea>
  <br>
<script>


  
  var octavian = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
  

  romans = ["I", "II", "III", "IV", "V", "VI", "VII"]


  scales = {
      "ionian": ["W", "W", "H", "W", "W", "W", "H"],
      "dorian": ["W", "H", "W", "W", "W", "H", "W"],
      "phrygian": ["H", "W", "W", "W", "H", "W", "W"],
      "lydian": ["W", "W", "W", "H", "W", "W", "H"],
      "mixolydian": ["W", "W", "H", "W", "W", "H", "W"],
      "aeolian": ["W", "H", "W", "W", "H", "W", "W"],
      "locrian": ["H", "W", "W", "H", "W", "W", "W"]
  }

  suffixes = {
    "major": [0,4,7],
    "minor": [0,3,7],
    "5": [0,7],
    "7": [0,4,7,10],
    "maj7": [0,4,7,11],
    "m7": [0,3,7,10],
    "sus2": [0,2,7],
    "sus4": [0,5,7],
    "add2": [0,2,4,7],
    "add9": [0,4,7,14],
    "6": [],
    "9": [],
    "m9": [],
    "maj9": [],
    "11": [],
    "13": [],
    "m13": [],
    "maj13": [],
    "dim": [0,3,6],
    "o": [0,3,6],
    "+": [0,4,8],
    "7#9": []
  }


  
  Synth instanceof AudioSynth; // true

  var testInstance = new AudioSynth;
  testInstance instanceof AudioSynth; // true

  testInstance === Synth; // true

  var piano = Synth.createInstrument('piano');


  // console.log(chord_finder)

  function buildChordBox(){
    val = $(".tab-chords").val()
    chords_list = val.split("-")

    $(".chords-box-list").empty()

    $.each(chords_list, function(index, item){
      
      ct = findChordType(item)
      $(".chords-box-list").append(
        `<li data-degree="`+ct["degree"]+`" data-chord-type="`+ct["chord_type"]+`">
          `+item+`
        </li>`
      )
    })
  }


  $("body").on("click", ".chords-box-list li", function(){
    playChordsList($(this))
  })

  function playChordsList(el){
     // Get Note Degree
    degree = el.attr("data-degree")
    // Get Note Chord Type
    ch = el.attr("data-chord-type");

    list_key = $(".chords-box-key").val()
    list_mode = $(".chords-box-mode").val()
    
    // Get Note Octavian
    i = octavian.indexOf(
      list_key
    );
    octavian.push.apply(octavian, octavian.splice(0, i));

    out = []
    o = 0 

    $.each(scales[list_mode], function(index, item){
      r = romans[index]

      out.push(o)

      if (item == "W"){
        o += 2
      } else {
        o += 1
      }
    })

    keyed = []
    $.each(out, function(index, item){
      n = octavian[item]
      keyed.push(n)
    })



    console.log("notes", keyed)

    note = keyed[degree - 1]

    // console.log("degree", note)
    console.log("chord", note +" "+ ch)
    playMadeChords(note, ch)

    $(".current-chord").html(note + " " + ch)

    el.addClass("playing")
    setTimeout(function(){ 
      el.removeClass("playing")
    }, 250);
  }

  function playMadeChords(note, ch) {
    i = octavian.indexOf(note);
    octavian.push.apply(octavian, octavian.splice(0, i));

    console.log(octavian)

    octos = []
    octave = 4
  
    // FOR PIANO
    $(".active[data-note][data-octave]").removeClass("active")
    $(".root-note[data-note][data-octave]").removeClass("root-note")

    $("[data-note='"+note+"'][data-octave='"+octave+"']").addClass("root-note")


    $.each(suffixes[ch], function(index, item){

      piano.play(octavian[item], octave, 3);
      
      // FOR PIANO
      $("[data-note='"+octavian[item]+"'][data-octave='"+octave+"']").addClass("active")
      
    })

    
    $(".key.active").not( ".key.root-note" ).each(function(){
      rn = parseInt(
        $(".key.root-note").attr("data-global-key")
      )
      
      id = parseInt(
        $(this).attr("data-global-key")
      )

      nt = $(this).attr("data-note")
      
      console.log("!!! "+rn+" : "+id)

      if (rn > id) {
        $(this).removeClass("active")
        $(this).nextUntil("[data-note='"+nt+"']").last().next().addClass("active")
      }

    })



  }


  // 
  $("body").on("click", ".chords-list-touch", function(){
    $(this).toggleClass("active")
  })


// 

  $(document).on('keypress',function(e) {
    // console.log(e.key)
    if (e.key == "`") {
      // alert("hi")
      $(".chords-list-touch").toggleClass("active")
      return
    }

    if ($(".chords-list-touch").hasClass("active")) {
      
      console.log(e.key)
      el = $(".chords-box-list li").eq(e.key - 1)

      playChordsList(el)

    } else {
      

    }

  });





// 
function findChordType(item){
  
  split = ""
  split = chordSplitter(item)
  clean = item.replace(split, "")
  upcase = clean.toUpperCase()
  degree = romans.indexOf(upcase) + 1;
  

  if (split) {
    return {
      degree: degree,
      chord_type: split
    }
  }
  // FIRST CHECK IF MAJOR OR MINOR 
  if (clean == clean.toUpperCase()) {
   chord_type = "major"
   return {
      degree: degree,
      chord_type: chord_type
    }
  }
  if (clean == clean.toLowerCase()){
   chord_type = "minor"
   return {
      degree: degree,
      chord_type: chord_type
    }
  }

}



function chordSplitter(chord){

  suffix_output = ""
  $.each(suffixes, function(index, item){
    if (index == "+") {
      suffix_output += "\\+?|"
    } else {
      suffix_output += index + "?|"
    }
  })


  types = "(?:"+suffix_output+")"
  regex = new RegExp(types+"\\b", "g");

  var matched_chords = chord.match(regex);
  var newArray = matched_chords.filter(function(v){return v!==''});
  
  console.log(matched_chords);
  
  // console.log("Split", newArray[0])

  return newArray[0]
}

var chordsTypeWatchOptions = {
    callback: function (value) { 
      buildChordBox()
    },
    wait: 750,
    highlight: true,
    allowSubmit: false,
    captureLength: 2
}

$(".tab-chords").typeWatch( chordsTypeWatchOptions );
</script>

<%= render "songs/chords_lab" %>